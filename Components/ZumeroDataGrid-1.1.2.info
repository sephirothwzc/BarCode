{"Name":"DataGrid for Xamarin.Forms","Id":1907,"Alias":"ZumeroDataGrid","Description":"\r\nZumero.DataGrid is a Xamarin.Forms control for displaying data in rows and columns.\r\n\r\n## Features:\r\n\r\n - Support for cell contents to be any Xamarin.Forms.View\r\n - Scrolling, both horizontal and vertical\r\n - Optional top frozen header row\r\n - Optional left frozen column\r\n - Separate View template for each column\r\n - View recycling (If you have 1000 rows but only 10 can be visible, DataGrid creates 10 Views and reuses them.)\r\n - Data row objects (provided to the DataGrid as an IList\u0026lt;object\u0026gt;)\r\n - Strong integration with the Xamarin.Forms binding mechanism\r\n - Automatic updates if an ObservableCollection is used for rows and columns\r\n - Configurable row height (for all rows in the grid)\r\n - Configurable column widths (can be different for each column)\r\n - Configurable spacing between rows and columns\r\n - Row selections\r\n - Works with C#, F#, and XAML\r\n - Support for iOS, Android, and Windows Phone\r\n - Full API documentation in MonoDoc\r\n\r\n## XAML Snippet showing a column definition\r\n\r\n```xml\r\n\u003cd:Column Width=\"120\"\u003e\r\n  \u003cd:Column.HeaderView\u003e\r\n    \u003cLabel Text=\"Adjust X\"\u003e\u003c/Label\u003e\r\n  \u003c/d:Column.HeaderView\u003e\r\n  \u003cd:Column.Template\u003e\r\n    \u003cDataTemplate\u003e\r\n      \u003cSlider Value=\"{Binding X, Mode=TwoWay}\" Minimum=\"-20\" Maximum=\"20\"\u003e\u003c/Slider\u003e\r\n    \u003c/DataTemplate\u003e\r\n  \u003c/d:Column.Template\u003e\r\n\u003c/d:Column\u003e\r\n```\r\n\r\n","Version":"1.1.2","Summary":"A Xamarin.Forms control for displaying data in rows and columns","QuickStart":"# Getting Started with Zumero.DataGrid\r\n\r\nZumero.DataGrid is a Xamarin.Forms control for displaying data in rows and columns.\r\n\r\n## Features:\r\n\r\n - Support for cell contents to be any Xamarin.Forms.View\r\n - Scrolling, both horizontal and vertical\r\n - Optional top frozen header row\r\n - Optional left frozen column\r\n - Separate View template for each column\r\n - View recycling (If you have 1000 rows but only 10 can be visible, DataGrid creates 10 Views and reuses them.)\r\n - Data row objects (provided to the DataGrid as an IList\u0026lt;object\u0026gt;)\r\n - Strong integration with the Xamarin.Forms binding mechanism\r\n - Automatic updates if an ObservableCollection is used for rows and columns\r\n - Configurable row height (for all rows in the grid)\r\n - Configurable column widths (can be different for each column)\r\n - Configurable spacing between rows and columns\r\n - Row selections\r\n - Works with C#, F#, and XAML\r\n - Support for iOS, Android, and Windows Phone\r\n - Full API documentation in MonoDoc\r\n\r\n## Referencing the component\r\n\r\nAdd the Zumero.DataGrid component to the Components folder of\r\neach of your platform projects using the Xamarin Components\r\nfeature of your IDE.\r\n\r\nSince PCL projects currently do not have a Xamarin Components\r\nfolder, if you are using a PCL project for portable parts of\r\nyour Xamarin.Forms project (and you probably are), you will\r\nneed to manually add a Reference to Zumero.DataGrid.dll.\r\n\r\nTo find this file, look (on the file system) in the directory containing your\r\n.sln file and find the Components subdirectory, wherein the file you\r\nwant should be found at ZumeroDataGrid-VERSION/lib/pcl/Zumero.DataGrid.dll.\r\n\r\n## Initialization\r\n\r\nIn order to use Zumero.DataGrid, you will need to call Zumero.DataGridComponent.Init()\r\nfrom the platform-specific app code on each platform.  \r\n\r\nWe recommend that you simply insert the needed initialization call\r\ndirectly below the call to Xamarin.Forms.Forms.Init().\r\n\r\nFor example, on iOS:\r\n\r\n```csharp\r\npublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\r\n{\r\n    Forms.Init ();\r\n    Zumero.DataGridComponent.Init ();\r\n    ...\r\n```\r\n\r\n## Configuring a DataGrid control\r\n\r\nThe two most important properties of the DataGrid control are\r\nits Rows and Columns.\r\n\r\n - The Rows are the data.\r\n - The Columns describe *how* to display the data.\r\n\r\n### Data Row Objects\r\n\r\nThe data for each row come from the properties of an object.\r\nYou can use any class you want to represent a row, but we\r\nrecommend using\r\na class that implements INotifyPropertyChanged.\r\nThis allows two-way binding, so that view controls\r\nin your grid can update values in your row objects.\r\n\r\nHere is an example of a class to represent a data row:\r\n\r\n```csharp\r\npublic class myRow : INotifyPropertyChanged\r\n{\r\n    private double x = 0.0;\r\n    public event PropertyChangedEventHandler PropertyChanged;\r\n\r\n    public double XSquared\r\n    {\r\n        get { return x * x; }\r\n    }\r\n\r\n    public double X\r\n    {\r\n        get { return x; }\r\n        set {\r\n            if (x != value) {\r\n                x = value;\r\n                if (PropertyChanged != null) {\r\n                    PropertyChanged (this, new PropertyChangedEventArgs (\"X\"));\r\n                    PropertyChanged (this, new PropertyChangedEventArgs (\"XSquared\"));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe example above includes two properties, one of which is\r\nread-only.\r\n\r\nHere is the same example in F#:\r\n\r\n```fsharp\r\ntype myRow() =\r\n    let propertyChanged = Event\u003cPropertyChangedEventHandler, PropertyChangedEventArgs\u003e()\r\n    let mutable x = 0.0\r\n\r\n    member this.XSquared  \r\n        with get() = x * x\r\n\r\n    member this.X\r\n        with get() = x\r\n        and set(value:double) = \r\n            if x \u003c\u003e value then\r\n                x \u003c- value\r\n                propertyChanged.Trigger(this, new PropertyChangedEventArgs(\"X\"))\r\n                propertyChanged.Trigger(this, new PropertyChangedEventArgs(\"XSquared\"))\r\n\r\n    interface INotifyPropertyChanged with\r\n        [\u003cCLIEvent\u003e]\r\n        member this.PropertyChanged = propertyChanged.Publish\r\n```\r\n\r\nThe Rows property of DataGrid is IList\u0026lt;object\u0026gt;, so any\r\nIList-conforming .NET collection can be used to represent\r\nyour list of row objects.  However, we recommend using\r\nan ObservableCollecton so that DataGrid can listen\r\nand automatically update things when rows are replaced,\r\ndeleted or added.\r\n\r\n### Columns\r\n\r\nThe Zumero.Column class is used to represent a Column of\r\na DataGrid.  You can specify a Width for the column, as well\r\nas a HeaderView (a view to be shown in the frozen row at\r\nthe top).  But the most important property of Zumero.Column\r\nis the Template, which specifies what kind of view should be\r\nused for the cells of this columna and how to bind that view\r\nto properties of the data row.\r\n\r\nHere is a C# example of a Column which takes the X property\r\nfrom the data row and displays it in a Label view:\r\n\r\n```csharp\r\nusing Zumero;\r\n...\r\nnew Column {\r\n    Width = 80,\r\n    HeaderView = new Label {\r\n        Text = \"X\",\r\n        BackgroundColor = Color.Gray,\r\n        XAlign = TextAlignment.Center,\r\n        YAlign = TextAlignment.Center,\r\n    },\r\n    Template = new DataTemplate (() =\u003e {\r\n        var v = new Label {\r\n            BackgroundColor = Color.White,\r\n            TextColor = Color.Black,\r\n            XAlign = TextAlignment.Center,\r\n            YAlign = TextAlignment.Center,\r\n        };\r\n        v.SetBinding (Label.TextProperty, \"X\");\r\n        return v;\r\n    }),\r\n},\r\n```\r\n\r\nNote that the height of all the header views is\r\ncontrolled by the HeaderHeight property of the DataGrid.\r\n\r\nIf you are trying to set headers for your columns and\r\nthey are not showing up, verify that the HeaderHeight of the DataGrid\r\nis set appropriately (something greater than 0).\r\n\r\nThe default value of the DataGrid HeaderHeight is 50.  If you do not \r\nset the HeaderView property of any Columns, you will end up with 50 pixels \r\nof empty space at the top unless you override this default.  \r\nSet the HeaderHeight to 0 if you don\u0027t want the header row.\r\n\r\n### Putting Rows and Columns together\r\n\r\nBelow is a more complete example (in both C# and XAML) which \r\nconstructs an entire DataGrid with three columns:\r\n\r\n - A Label bound to X (just like the example above)\r\n - A Label bound to XSquared\r\n - A Slider bound to X\r\n\r\nMoving the Slider automatically changes the value of\r\nthe X property in the corresponding data row object,\r\nwhich, in turn, sends notifications about its changed\r\nproperties, which causes the other two columns to be\r\nupdated as well.\r\n\r\n```csharp\r\nusing Zumero;\r\n...\r\nnew DataGrid {\r\n    VerticalOptions = LayoutOptions.FillAndExpand,\r\n    HorizontalOptions = LayoutOptions.FillAndExpand,\r\n    BackgroundColor = Color.Black,\r\n\r\n    RowHeight = 50,\r\n    RowSpacing = 2,\r\n    ColumnSpacing = 2,\r\n    HeaderHeight = 50,\r\n\r\n    Columns = new ObservableCollection\u003cColumn\u003e {\r\n        new Column {\r\n            Width = 80,\r\n            HeaderView = new Label {\r\n                Text = \"X\",\r\n                BackgroundColor = Color.Gray,\r\n                XAlign = TextAlignment.Center,\r\n                YAlign = TextAlignment.Center,\r\n            },\r\n            Template = new DataTemplate (() =\u003e {\r\n                var v = new Label {\r\n                    BackgroundColor = Color.White,\r\n                    TextColor = Color.Black,\r\n                    XAlign = TextAlignment.Center,\r\n                    YAlign = TextAlignment.Center,\r\n                };\r\n                v.SetBinding (Label.TextProperty, \"X\");\r\n                return v;\r\n            }),\r\n        },\r\n        new Column {\r\n            Width = 80,\r\n            HeaderView = new Label {\r\n                Text = \"X^2\",\r\n                BackgroundColor = Color.Gray,\r\n                XAlign = TextAlignment.Center,\r\n                YAlign = TextAlignment.Center,\r\n            },\r\n            Template = new DataTemplate (() =\u003e {\r\n                var v = new Label {\r\n                    BackgroundColor = Color.White,\r\n                    TextColor = Color.Black,\r\n                    XAlign = TextAlignment.Center,\r\n                    YAlign = TextAlignment.Center,\r\n                };\r\n                v.SetBinding (Label.TextProperty, \"XSquared\");\r\n                return v;\r\n            }),\r\n        },\r\n        new Column {\r\n            Width = 120,\r\n            HeaderView = new Label {\r\n                Text = \"Slider\",\r\n                BackgroundColor = Color.Gray,\r\n                XAlign = TextAlignment.Center,\r\n                YAlign = TextAlignment.Center,\r\n            },\r\n            Template = new DataTemplate (() =\u003e {\r\n                var v = new Slider {\r\n                    BackgroundColor = Color.White,\r\n                    Minimum = -20,\r\n                    Maximum = 20,\r\n                };\r\n                v.SetBinding (Slider.ValueProperty, \"X\", BindingMode.TwoWay);\r\n                return v;\r\n            }),\r\n        },\r\n    },\r\n\r\n    Rows = new ObservableCollection\u003cobject\u003e {\r\n        new myRow {X = 1},\r\n        new myRow {X = 2},\r\n        new myRow {X = 3},\r\n        new myRow {X = 4},\r\n        new myRow {X = 5},\r\n        new myRow {X = 6},\r\n        new myRow {X = 7},\r\n    },\r\n}\r\n```\r\n\r\nXAML\r\n\r\n```xml\r\n\u003cd:DataGrid x:Name=\"datagrid\" Rows=\"{Binding DataRows}\" BackgroundColor=\"Black\" RowHeight=\"80\"\u003e\r\n  \u003cd:DataGrid.Columns\u003e\r\n\r\n    \u003cd:Column Width=\"80\"\u003e\r\n      \u003cd:Column.HeaderView\u003e\r\n        \u003cLabel Text=\"X\" BackgroundColor=\"Gray\" TextColor=\"Black\" XAlign=\"Center\" YAlign=\"Center\"\u003e\u003c/Label\u003e\r\n      \u003c/d:Column.HeaderView\u003e\r\n      \u003cd:Column.Template\u003e\r\n        \u003cDataTemplate\u003e\r\n          \u003cLabel Text=\"{Binding X}\" BackgroundColor=\"White\" TextColor=\"Black\" XAlign=\"Center\" YAlign=\"Center\"\u003e\u003c/Label\u003e\r\n        \u003c/DataTemplate\u003e\r\n      \u003c/d:Column.Template\u003e\r\n    \u003c/d:Column\u003e\r\n  \r\n    \u003cd:Column Width=\"80\"\u003e\r\n      \u003cd:Column.HeaderView\u003e\r\n        \u003cLabel Text=\"X^2\" BackgroundColor=\"Gray\" TextColor=\"Black\" XAlign=\"Center\" YAlign=\"Center\"\u003e\u003c/Label\u003e\r\n      \u003c/d:Column.HeaderView\u003e\r\n      \u003cd:Column.Template\u003e\r\n        \u003cDataTemplate\u003e\r\n          \u003cLabel Text=\"{Binding XSquared}\" BackgroundColor=\"White\" TextColor=\"Black\" XAlign=\"Center\" YAlign=\"Center\"\u003e\u003c/Label\u003e\r\n        \u003c/DataTemplate\u003e\r\n      \u003c/d:Column.Template\u003e\r\n    \u003c/d:Column\u003e\r\n\r\n    \u003cd:Column Width=\"120\"\u003e\r\n      \u003cd:Column.HeaderView\u003e\r\n        \u003cLabel Text=\"Slider\" BackgroundColor=\"Gray\" TextColor=\"Black\" XAlign=\"Center\" YAlign=\"Center\"\u003e\u003c/Label\u003e\r\n      \u003c/d:Column.HeaderView\u003e\r\n      \u003cd:Column.Template\u003e\r\n        \u003cDataTemplate\u003e\r\n          \u003cSlider Value=\"{Binding X, Mode=TwoWay}\" BackgroundColor=\"White\" Minimum=\"-20\" Maximum=\"20\"\u003e\u003c/Slider\u003e\r\n        \u003c/DataTemplate\u003e\r\n      \u003c/d:Column.Template\u003e\r\n    \u003c/d:Column\u003e\r\n\r\n  \u003c/d:DataGrid.Columns\u003e\r\n\u003c/d:DataGrid\u003e\r\n```\r\n\r\n","Hash":"489fe68ea33c4c3e8c5518a1e747f57b","TargetPlatforms":["ios","android"],"TrialHash":"f42da347b517b0a5b117502e3466687b"}